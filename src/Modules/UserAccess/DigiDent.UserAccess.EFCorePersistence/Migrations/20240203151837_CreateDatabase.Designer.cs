// <auto-generated />
using System;
using DigiDent.UserAccess.EFCorePersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigiDent.UserAccess.EFCorePersistence.Migrations
{
    [DbContext(typeof(UserAccessDbContext))]
    [Migration("20240203151837_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("user_access")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigiDent.UserAccess.Application.Tokens.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Token");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens", "user_access");
                });

            modelBuilder.Entity("DigiDent.UserAccess.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Full Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email")
                        .IsUnique();

                    b.ToTable("Users", "user_access");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdf9e828-6ab1-4827-a4dd-2ef3f6c1f0ca"),
                            Email = "temp@admin.tmp",
                            FullName = "Temporary Administrator",
                            Password = "Px5nZJhHoFggs/JuyTfMcxUsx4R3jXeNvBnLANwDF94=:fJNA9zvhySeFTosoQ/aNJvriiAQTgXC7RpQUEHvLVzg=",
                            PhoneNumber = "+380000000000",
                            Role = "Administrator",
                            Status = "Activated"
                        });
                });

            modelBuilder.Entity("DigiDent.UserAccess.Application.Tokens.RefreshToken", b =>
                {
                    b.HasOne("DigiDent.UserAccess.Domain.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("DigiDent.UserAccess.Application.Tokens.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
